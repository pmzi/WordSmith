# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `ruby-openai` gem.
# Please instead update this file by running `bin/tapioca gem ruby-openai`.


# source://ruby-openai//lib/openai/http_headers.rb#1
module OpenAI
  class << self
    # source://ruby-openai//lib/openai.rb#73
    def configuration; end

    # Sets the attribute configuration
    #
    # @param value the value to set the attribute configuration to.
    #
    # source://ruby-openai//lib/openai.rb#70
    def configuration=(_arg0); end

    # @yield [configuration]
    #
    # source://ruby-openai//lib/openai.rb#77
    def configure; end

    # Estimate the number of tokens in a string, using the rules of thumb from OpenAI:
    # https://help.openai.com/en/articles/4936856-what-are-tokens-and-how-to-count-them
    #
    # @raise [ArgumentError]
    #
    # source://ruby-openai//lib/openai.rb#83
    def rough_token_count(content = T.unsafe(nil)); end
  end
end

# source://ruby-openai//lib/openai/assistants.rb#2
class OpenAI::Assistants
  # @return [Assistants] a new instance of Assistants
  #
  # source://ruby-openai//lib/openai/assistants.rb#5
  def initialize(client:); end

  # source://ruby-openai//lib/openai/assistants.rb#17
  def create(parameters: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/assistants.rb#25
  def delete(id:); end

  # source://ruby-openai//lib/openai/assistants.rb#9
  def list; end

  # source://ruby-openai//lib/openai/assistants.rb#21
  def modify(id:, parameters: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/assistants.rb#13
  def retrieve(id:); end
end

# source://ruby-openai//lib/openai/assistants.rb#3
OpenAI::Assistants::BETA_VERSION = T.let(T.unsafe(nil), String)

# source://ruby-openai//lib/openai/audio.rb#2
class OpenAI::Audio
  # @return [Audio] a new instance of Audio
  #
  # source://ruby-openai//lib/openai/audio.rb#3
  def initialize(client:); end

  # source://ruby-openai//lib/openai/audio.rb#15
  def speech(parameters: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/audio.rb#7
  def transcribe(parameters: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/audio.rb#11
  def translate(parameters: T.unsafe(nil)); end
end

# source://ruby-openai//lib/openai/batches.rb#2
class OpenAI::Batches
  # @return [Batches] a new instance of Batches
  #
  # source://ruby-openai//lib/openai/batches.rb#3
  def initialize(client:); end

  # source://ruby-openai//lib/openai/batches.rb#19
  def cancel(id:); end

  # source://ruby-openai//lib/openai/batches.rb#15
  def create(parameters: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/batches.rb#7
  def list(parameters: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/batches.rb#11
  def retrieve(id:); end
end

# source://ruby-openai//lib/openai/client.rb#2
class OpenAI::Client
  include ::OpenAI::HTTPHeaders
  include ::OpenAI::HTTP

  # @return [Client] a new instance of Client
  #
  # source://ruby-openai//lib/openai/client.rb#17
  def initialize(config = T.unsafe(nil), &faraday_middleware); end

  # source://ruby-openai//lib/openai/client.rb#15
  def access_token; end

  # source://ruby-openai//lib/openai/client.rb#15
  def api_type; end

  # source://ruby-openai//lib/openai/client.rb#15
  def api_version; end

  # source://ruby-openai//lib/openai/client.rb#61
  def assistants; end

  # source://ruby-openai//lib/openai/client.rb#41
  def audio; end

  # @return [Boolean]
  #
  # source://ruby-openai//lib/openai/client.rb#101
  def azure?; end

  # source://ruby-openai//lib/openai/client.rb#93
  def batches; end

  # source://ruby-openai//lib/openai/client.rb#105
  def beta(apis); end

  # source://ruby-openai//lib/openai/client.rb#29
  def chat(parameters: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/client.rb#37
  def completions(parameters: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/client.rb#33
  def embeddings(parameters: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/client.rb#15
  def extra_headers; end

  # source://ruby-openai//lib/openai/client.rb#15
  def faraday_middleware; end

  # source://ruby-openai//lib/openai/client.rb#45
  def files; end

  # source://ruby-openai//lib/openai/client.rb#49
  def finetunes; end

  # source://ruby-openai//lib/openai/client.rb#53
  def images; end

  # source://ruby-openai//lib/openai/client.rb#15
  def log_errors; end

  # source://ruby-openai//lib/openai/client.rb#69
  def messages; end

  # source://ruby-openai//lib/openai/client.rb#57
  def models; end

  # source://ruby-openai//lib/openai/client.rb#97
  def moderations(parameters: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/client.rb#15
  def organization_id; end

  # source://ruby-openai//lib/openai/client.rb#15
  def request_timeout; end

  # source://ruby-openai//lib/openai/client.rb#77
  def run_steps; end

  # source://ruby-openai//lib/openai/client.rb#73
  def runs; end

  # source://ruby-openai//lib/openai/client.rb#65
  def threads; end

  # source://ruby-openai//lib/openai/client.rb#15
  def uri_base; end

  # source://ruby-openai//lib/openai/client.rb#89
  def vector_store_file_batches; end

  # source://ruby-openai//lib/openai/client.rb#85
  def vector_store_files; end

  # source://ruby-openai//lib/openai/client.rb#81
  def vector_stores; end
end

# source://ruby-openai//lib/openai/client.rb#5
OpenAI::Client::CONFIG_KEYS = T.let(T.unsafe(nil), Array)

# source://ruby-openai//lib/openai.rb#42
class OpenAI::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://ruby-openai//lib/openai.rb#57
  def initialize; end

  # Returns the value of attribute access_token.
  #
  # source://ruby-openai//lib/openai.rb#43
  def access_token; end

  # Sets the attribute access_token
  #
  # @param value the value to set the attribute access_token to.
  #
  # source://ruby-openai//lib/openai.rb#43
  def access_token=(_arg0); end

  # Returns the value of attribute api_type.
  #
  # source://ruby-openai//lib/openai.rb#43
  def api_type; end

  # Sets the attribute api_type
  #
  # @param value the value to set the attribute api_type to.
  #
  # source://ruby-openai//lib/openai.rb#43
  def api_type=(_arg0); end

  # Returns the value of attribute api_version.
  #
  # source://ruby-openai//lib/openai.rb#43
  def api_version; end

  # Sets the attribute api_version
  #
  # @param value the value to set the attribute api_version to.
  #
  # source://ruby-openai//lib/openai.rb#43
  def api_version=(_arg0); end

  # Returns the value of attribute extra_headers.
  #
  # source://ruby-openai//lib/openai.rb#43
  def extra_headers; end

  # Sets the attribute extra_headers
  #
  # @param value the value to set the attribute extra_headers to.
  #
  # source://ruby-openai//lib/openai.rb#43
  def extra_headers=(_arg0); end

  # Returns the value of attribute log_errors.
  #
  # source://ruby-openai//lib/openai.rb#43
  def log_errors; end

  # Sets the attribute log_errors
  #
  # @param value the value to set the attribute log_errors to.
  #
  # source://ruby-openai//lib/openai.rb#43
  def log_errors=(_arg0); end

  # Returns the value of attribute organization_id.
  #
  # source://ruby-openai//lib/openai.rb#43
  def organization_id; end

  # Sets the attribute organization_id
  #
  # @param value the value to set the attribute organization_id to.
  #
  # source://ruby-openai//lib/openai.rb#43
  def organization_id=(_arg0); end

  # Returns the value of attribute request_timeout.
  #
  # source://ruby-openai//lib/openai.rb#43
  def request_timeout; end

  # Sets the attribute request_timeout
  #
  # @param value the value to set the attribute request_timeout to.
  #
  # source://ruby-openai//lib/openai.rb#43
  def request_timeout=(_arg0); end

  # Returns the value of attribute uri_base.
  #
  # source://ruby-openai//lib/openai.rb#43
  def uri_base; end

  # Sets the attribute uri_base
  #
  # @param value the value to set the attribute uri_base to.
  #
  # source://ruby-openai//lib/openai.rb#43
  def uri_base=(_arg0); end
end

# source://ruby-openai//lib/openai.rb#52
OpenAI::Configuration::DEFAULT_API_VERSION = T.let(T.unsafe(nil), String)

# source://ruby-openai//lib/openai.rb#55
OpenAI::Configuration::DEFAULT_LOG_ERRORS = T.let(T.unsafe(nil), FalseClass)

# source://ruby-openai//lib/openai.rb#54
OpenAI::Configuration::DEFAULT_REQUEST_TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://ruby-openai//lib/openai.rb#53
OpenAI::Configuration::DEFAULT_URI_BASE = T.let(T.unsafe(nil), String)

# source://ruby-openai//lib/openai.rb#24
class OpenAI::ConfigurationError < ::OpenAI::Error; end

# source://ruby-openai//lib/openai.rb#23
class OpenAI::Error < ::StandardError; end

# source://ruby-openai//lib/openai/files.rb#2
class OpenAI::Files
  # @return [Files] a new instance of Files
  #
  # source://ruby-openai//lib/openai/files.rb#10
  def initialize(client:); end

  # source://ruby-openai//lib/openai/files.rb#36
  def content(id:); end

  # source://ruby-openai//lib/openai/files.rb#40
  def delete(id:); end

  # source://ruby-openai//lib/openai/files.rb#14
  def list; end

  # source://ruby-openai//lib/openai/files.rb#32
  def retrieve(id:); end

  # source://ruby-openai//lib/openai/files.rb#18
  def upload(parameters: T.unsafe(nil)); end

  private

  # source://ruby-openai//lib/openai/files.rb#46
  def prepare_file_input(file_input:); end

  # @raise [ArgumentError]
  #
  # source://ruby-openai//lib/openai/files.rb#56
  def validate(file:, purpose:, file_input:); end

  # source://ruby-openai//lib/openai/files.rb#65
  def validate_jsonl(file:); end
end

# source://ruby-openai//lib/openai/files.rb#3
OpenAI::Files::PURPOSES = T.let(T.unsafe(nil), Array)

# source://ruby-openai//lib/openai/finetunes.rb#2
class OpenAI::Finetunes
  # @return [Finetunes] a new instance of Finetunes
  #
  # source://ruby-openai//lib/openai/finetunes.rb#3
  def initialize(client:); end

  # source://ruby-openai//lib/openai/finetunes.rb#19
  def cancel(id:); end

  # source://ruby-openai//lib/openai/finetunes.rb#11
  def create(parameters: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/finetunes.rb#7
  def list; end

  # source://ruby-openai//lib/openai/finetunes.rb#23
  def list_events(id:); end

  # source://ruby-openai//lib/openai/finetunes.rb#15
  def retrieve(id:); end
end

# source://ruby-openai//lib/openai/http.rb#6
module OpenAI::HTTP
  include ::OpenAI::HTTPHeaders

  # source://ruby-openai//lib/openai/http.rb#34
  def delete(path:); end

  # source://ruby-openai//lib/openai/http.rb#9
  def get(path:, parameters: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/http.rb#21
  def json_post(path:, parameters:); end

  # source://ruby-openai//lib/openai/http.rb#27
  def multipart_post(path:, parameters: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/http.rb#15
  def post(path:); end

  private

  # source://ruby-openai//lib/openai/http.rb#113
  def configure_json_post_request(req, parameters); end

  # source://ruby-openai//lib/openai/http.rb#73
  def conn(multipart: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/http.rb#98
  def multipart_parameters(parameters); end

  # source://ruby-openai//lib/openai/http.rb#42
  def parse_jsonl(response); end

  # Given a proc, returns an outer proc that can be used to iterate over a JSON stream of chunks.
  # For each chunk, the inner user_proc is called giving it the JSON object. The JSON object could
  # be a data object or an error object as described in the OpenAI API documentation.
  #
  # @param user_proc [Proc] The inner proc to call for each JSON object in the chunk.
  # @return [Proc] An outer proc that iterates over a raw stream, converting it to JSON.
  #
  # source://ruby-openai//lib/openai/http.rb#58
  def to_json_stream(user_proc:); end

  # source://ruby-openai//lib/openai/http.rb#127
  def try_parse_json(maybe_json); end

  # source://ruby-openai//lib/openai/http.rb#87
  def uri(path:); end
end

# source://ruby-openai//lib/openai/http_headers.rb#2
module OpenAI::HTTPHeaders
  # source://ruby-openai//lib/openai/http_headers.rb#3
  def add_headers(headers); end

  private

  # source://ruby-openai//lib/openai/http_headers.rb#25
  def azure_headers; end

  # source://ruby-openai//lib/openai/http_headers.rb#32
  def extra_headers; end

  # source://ruby-openai//lib/openai/http_headers.rb#9
  def headers; end

  # source://ruby-openai//lib/openai/http_headers.rb#17
  def openai_headers; end
end

# source://ruby-openai//lib/openai/images.rb#2
class OpenAI::Images
  # @return [Images] a new instance of Images
  #
  # source://ruby-openai//lib/openai/images.rb#3
  def initialize(client: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/images.rb#11
  def edit(parameters: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/images.rb#7
  def generate(parameters: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/images.rb#15
  def variations(parameters: T.unsafe(nil)); end

  private

  # source://ruby-openai//lib/openai/images.rb#21
  def open_files(parameters); end
end

# source://ruby-openai//lib/openai/messages.rb#2
class OpenAI::Messages
  # @return [Messages] a new instance of Messages
  #
  # source://ruby-openai//lib/openai/messages.rb#3
  def initialize(client:); end

  # source://ruby-openai//lib/openai/messages.rb#15
  def create(thread_id:, parameters: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/messages.rb#7
  def list(thread_id:, parameters: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/messages.rb#19
  def modify(id:, thread_id:, parameters: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/messages.rb#11
  def retrieve(thread_id:, id:); end
end

# source://ruby-openai//lib/openai.rb#26
class OpenAI::MiddlewareErrors < ::Faraday::Middleware
  # source://ruby-openai//lib/openai.rb#27
  def call(env); end
end

# source://ruby-openai//lib/openai/models.rb#2
class OpenAI::Models
  # @return [Models] a new instance of Models
  #
  # source://ruby-openai//lib/openai/models.rb#3
  def initialize(client:); end

  # source://ruby-openai//lib/openai/models.rb#7
  def list; end

  # source://ruby-openai//lib/openai/models.rb#11
  def retrieve(id:); end
end

# source://ruby-openai//lib/openai/run_steps.rb#2
class OpenAI::RunSteps
  # @return [RunSteps] a new instance of RunSteps
  #
  # source://ruby-openai//lib/openai/run_steps.rb#3
  def initialize(client:); end

  # source://ruby-openai//lib/openai/run_steps.rb#7
  def list(thread_id:, run_id:, parameters: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/run_steps.rb#11
  def retrieve(thread_id:, run_id:, id:); end
end

# source://ruby-openai//lib/openai/runs.rb#2
class OpenAI::Runs
  # @return [Runs] a new instance of Runs
  #
  # source://ruby-openai//lib/openai/runs.rb#3
  def initialize(client:); end

  # source://ruby-openai//lib/openai/runs.rb#23
  def cancel(id:, thread_id:); end

  # source://ruby-openai//lib/openai/runs.rb#15
  def create(thread_id:, parameters: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/runs.rb#27
  def create_thread_and_run(parameters: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/runs.rb#7
  def list(thread_id:, parameters: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/runs.rb#19
  def modify(id:, thread_id:, parameters: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/runs.rb#11
  def retrieve(thread_id:, id:); end

  # source://ruby-openai//lib/openai/runs.rb#31
  def submit_tool_outputs(thread_id:, run_id:, parameters: T.unsafe(nil)); end
end

# source://ruby-openai//lib/openai/threads.rb#2
class OpenAI::Threads
  # @return [Threads] a new instance of Threads
  #
  # source://ruby-openai//lib/openai/threads.rb#3
  def initialize(client:); end

  # source://ruby-openai//lib/openai/threads.rb#11
  def create(parameters: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/threads.rb#19
  def delete(id:); end

  # source://ruby-openai//lib/openai/threads.rb#15
  def modify(id:, parameters: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/threads.rb#7
  def retrieve(id:); end
end

# source://ruby-openai//lib/openai/version.rb#2
OpenAI::VERSION = T.let(T.unsafe(nil), String)

# source://ruby-openai//lib/openai/vector_store_file_batches.rb#2
class OpenAI::VectorStoreFileBatches
  # @return [VectorStoreFileBatches] a new instance of VectorStoreFileBatches
  #
  # source://ruby-openai//lib/openai/vector_store_file_batches.rb#3
  def initialize(client:); end

  # source://ruby-openai//lib/openai/vector_store_file_batches.rb#25
  def cancel(vector_store_id:, id:); end

  # source://ruby-openai//lib/openai/vector_store_file_batches.rb#18
  def create(vector_store_id:, parameters: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/vector_store_file_batches.rb#7
  def list(vector_store_id:, id:, parameters: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/vector_store_file_batches.rb#14
  def retrieve(vector_store_id:, id:); end
end

# source://ruby-openai//lib/openai/vector_store_files.rb#2
class OpenAI::VectorStoreFiles
  # @return [VectorStoreFiles] a new instance of VectorStoreFiles
  #
  # source://ruby-openai//lib/openai/vector_store_files.rb#3
  def initialize(client:); end

  # source://ruby-openai//lib/openai/vector_store_files.rb#15
  def create(vector_store_id:, parameters: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/vector_store_files.rb#19
  def delete(vector_store_id:, id:); end

  # source://ruby-openai//lib/openai/vector_store_files.rb#7
  def list(vector_store_id:, parameters: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/vector_store_files.rb#11
  def retrieve(vector_store_id:, id:); end
end

# source://ruby-openai//lib/openai/vector_stores.rb#2
class OpenAI::VectorStores
  # @return [VectorStores] a new instance of VectorStores
  #
  # source://ruby-openai//lib/openai/vector_stores.rb#3
  def initialize(client:); end

  # source://ruby-openai//lib/openai/vector_stores.rb#15
  def create(parameters: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/vector_stores.rb#23
  def delete(id:); end

  # source://ruby-openai//lib/openai/vector_stores.rb#7
  def list(parameters: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/vector_stores.rb#19
  def modify(id:, parameters: T.unsafe(nil)); end

  # source://ruby-openai//lib/openai/vector_stores.rb#11
  def retrieve(id:); end
end

# source://ruby-openai//lib/openai/compatibility.rb#1
module Ruby; end

# source://ruby-openai//lib/openai/compatibility.rb#2
module Ruby::OpenAI; end

# source://ruby-openai//lib/openai/compatibility.rb#7
Ruby::OpenAI::Configuration = OpenAI::Configuration

# source://ruby-openai//lib/openai/compatibility.rb#6
Ruby::OpenAI::ConfigurationError = OpenAI::ConfigurationError

# source://ruby-openai//lib/openai/compatibility.rb#5
Ruby::OpenAI::Error = OpenAI::Error

# source://ruby-openai//lib/openai/compatibility.rb#8
Ruby::OpenAI::MiddlewareErrors = OpenAI::MiddlewareErrors

# source://ruby-openai//lib/openai/compatibility.rb#3
Ruby::OpenAI::VERSION = T.let(T.unsafe(nil), String)
